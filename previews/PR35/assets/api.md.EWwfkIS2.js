import{_ as a,c as e,o as s,a6 as n}from"./chunks/framework.DohIApeR.js";const b=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),t={name:"api.md"},o=n(`<h1 id="API" tabindex="-1">API <a class="header-anchor" href="#API" aria-label="Permalink to &quot;API {#API}&quot;">​</a></h1><p>This is a list of documentation associated with every single <strong>exported</strong> function from <code>OMOPCDMPathways</code>. There are a few different sections with a brief explanation of what these sections are followed by relevant functions.</p><h2 id="Pre-Processing" tabindex="-1">Pre-Processing <a class="header-anchor" href="#Pre-Processing" aria-label="Permalink to &quot;Pre-Processing {#Pre-Processing}&quot;">​</a></h2><p>This family of functions are dedicated to pre-process the Data.</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OMOPCDMPathways.period_prior_to_index" href="#OMOPCDMPathways.period_prior_to_index">#</a> <b><u>OMOPCDMPathways.period_prior_to_index</u></b> — <i>Function</i>. <p><strong>Example:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>period_prior_to_index(</span></span>
<span class="line"><span>    cohort_id = [1, 1, 1, 1, 1], </span></span>
<span class="line"><span>    conn; </span></span>
<span class="line"><span>    date_prior = Day(100), </span></span>
<span class="line"><span>    tab=cohort</span></span>
<span class="line"><span>)</span></span></code></pre></div><p><strong>Implemetation:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(1) Constructs a SQL query to select cohort_definition_id, subject_id, and cohort_start_date from a specified table, filtering by cohort_id.</span></span>
<span class="line"><span>(2) Executes the constructed SQL query using a database connection, fetching the results into a DataFrame.</span></span>
<span class="line"><span>(3) If the DataFrame is not empty, converts cohort_start_date to DateTime and subtracts date_prior from each date, then returns the modified DataFrame.</span></span></code></pre></div><p>Given <code>cohort_id&#39;s</code> , return a <code>DataFrame</code> with the <code>cohort_start_date</code> adjusted to prior each subjects&#39; cohort entry date (i.e. their <code>cohort_start_date</code>)</p><p><strong>Arguments:</strong></p><ul><li><p><code>cohort_id</code> - vector of cohort IDs</p></li><li><p><code>conn</code> - database connection</p></li></ul><p><strong>Keyword Arguments:</strong></p><ul><li><p><code>date_prior::Dates.AbstractTime</code> - how much time prior the index date should be adjusted by; accepts a <code>Dates.AbstractTim</code>e object such as <code>Day</code>, <code>Month</code>, etc. (Default: <code>Day(100)</code>)</p></li><li><p><code>tab</code> - the <code>SQLTable</code> representing the cohort table. (Default: <code>cohort</code>)</p></li></ul><p><strong>Returns</strong></p><ul><li>DataFrame with the <code>cohort_start_date</code> adjusted by the <code>date_prior</code>.</li></ul><p><a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/blob/ce67010da1c70f01bf4fc5d1443c010feb2ab82f/src/preprocessing.jl#L3-L34" target="_blank" rel="noreferrer">source</a></p><p>#Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function start_date_on_person(cohort_id::Vector, tables, conn)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    tab = tables[:cohort]</span></span>
<span class="line"><span>    date_prior = Day(100)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    sql = From(tab) |&gt;</span></span>
<span class="line"><span>    Where(Fun.in(Get.cohort_definition_id, cohort_id...)) |&gt;</span></span>
<span class="line"><span>    Select(Get.cohort_definition_id, Get.subject_id, Get.cohort_start_date) |&gt;</span></span>
<span class="line"><span>    q -&gt; render(q, dialect = :sqlite)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    df = DBInterface.execute(conn, String(sql)) |&gt; DataFrame</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Check if the DataFrame is not empty</span></span>
<span class="line"><span>    if nrow(df) &gt; 0</span></span>
<span class="line"><span>        # Convert the cohort_start_date to DateTime and subtract the date_prior</span></span>
<span class="line"><span>        df.cohort_start_date = DateTime.(df.cohort_start_date) .- date_prior</span></span>
<span class="line"><span>    else</span></span>
<span class="line"><span>        error(&quot;Invalid DataFrame&quot;)</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return df</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>period_prior_to_index(</span></span>
<span class="line"><span>    cohort_id = [1, 1, 1, 1, 1],</span></span>
<span class="line"><span>    index_date_func = start_date_on_person,</span></span>
<span class="line"><span>    conn;</span></span>
<span class="line"><span>)</span></span></code></pre></div><p><strong>Implementation:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(1) Calls GenerateTables with the database connection conn to generate tables, specifying inplace = false and exported = true.</span></span>
<span class="line"><span>(2) Invokes the index_date_func function, passing cohort_id, the generated tables, and the connection conn, to obtain a DataFrame df.</span></span>
<span class="line"><span>(3) Returns the DataFrame df.</span></span></code></pre></div><p>function period_prior_to_index(person_ids::Vector, index_date_func::Function, conn; date_prior=Day(100))</p><p>Given a vector of person IDs, this function returns a DataFrame with the cohort_start_date adjusted by the date_prior.</p><p><strong>Arguments:</strong></p><ul><li><p><code>cohort_id</code> - vector of cohort IDs</p></li><li><p><code>index_date_func</code> - function that returns the SQL query to get the start date of the person</p></li><li><p><code>conn</code> - database connection</p></li></ul><p><strong>Returns</strong></p><ul><li>DataFrame with the <code>cohort_start_date</code> adjusted by the <code>date_prior</code>.</li></ul><p><a href="https://github.com/JuliaHealth/OMOPCDMPathways.jl/blob/ce67010da1c70f01bf4fc5d1443c010feb2ab82f/src/preprocessing.jl#L57-L108" target="_blank" rel="noreferrer">source</a></p></div><br>`,6),p=[o];function i(r,c,d,l,h,_){return s(),e("div",null,p)}const f=a(t,[["render",i]]);export{b as __pageData,f as default};
